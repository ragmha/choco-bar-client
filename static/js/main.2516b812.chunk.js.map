{"version":3,"sources":["components/NavBar.tsx","components/Error.tsx","containers/Calculate.tsx","containers/Content.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledNav","styled","nav","StyledNavTitle","div","NavBar","title","errorHandler","error","componentStack","console","log","Error","children","onError","OutterWrapper","InnerWrapper","InnerWrapperResult","CalculateWrapper","StyledHeader","StyledInputSubmit","input","Reset","button","StyledInput","Label","StyledResult","StyledResultLabel","StyledResultValue","StyledError","span","Calculate","useState","result","setResult","useFetch","request","response","useForm","defaultValues","numberOfBars","register","handleSubmit","errors","resultContainKeys","Object","keys","map","item","key","onClick","onSubmit","data","a","async","post","Number","pricesOfBarPacketBox","quantitiesOfBarPacketBox","submitValue","ok","name","type","ref","required","Wrapper","StyledImage","img","StyledContent","StyledContentHeading","StyledContentDescription","StyledContentDescriptionWrapper","StyledLabel","StyledContentPrice","StyledContentWeight","StyledContentQuantity","Content","bars","setBars","mounted","useRef","useEffect","current","get","initalBars","initializeBars","loading","bar","id","src","alt","quantity","price","weight","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2516b812.chunk.js","sourcesContent":["\nimport React from 'react';\nimport styled from 'styled-components';\n\n\nconst StyledNav = styled.nav`\n  background-color:\t#ff6090;\n  height: 70px;\n  line-height: 70px;\n`;\n\nconst StyledNavTitle = styled.div`\n  color: blanchedalmond;\n  font-size: 30px;\n  font-family: 'Alata', sans-serif;\n  font-weight: 900;\n  text-transform: uppercase;\n  letter-spacing: 20px;\n  text-align: center;\n`;\n\nconst NavBar: React.FC<{ title: string }> = ({ title }) =>\n    <StyledNav>\n        <StyledNavTitle >\n            {title}\n        </StyledNavTitle>\n    </StyledNav>\n\n\n\nexport default NavBar","import React from 'react';\nimport ErrorBoundary from 'react-error-boundary';\n\nconst errorHandler = (error: Error, componentStack: string) => {\n    // Do something with the error\n    // E.g. log to an error logging client here\n    console.log({ error, componentStack })\n};\n\n\nconst Error: React.FC = ({ children }) => <ErrorBoundary onError={errorHandler}>\n    {children}\n</ErrorBoundary>\n\nexport default Error;\nexport { Error }","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport useFetch from 'use-http';\n\n\nconst OutterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`\n\nconst InnerWrapper = styled.div`\n  display: flex;\n  margin-top: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`\n\nconst InnerWrapperResult = styled.div`\n  padding-left: 5px;\n  padding-right: 5px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`\n\n\nconst CalculateWrapper = styled.div`\n  margin-top: 40px;\n  padding-top: 20px;\n  margin-bottom: 0;\n  box-shadow: 0 10px 10px 10px rgba(0,0,0,0.2);\n  transition: 0.3s;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 350px;\n  width: 500px;\n\n  &:hover {\n    box-shadow: 0 10px 10px 0 rgba(0,0,0,0.2);\n  }\n`\n\nconst StyledHeader = styled.div`\n  color: darkred;\n  font-size: 20px;\n  font-family: 'Alata', sans-serif;\n  font-weight: 900;\n  text-transform: uppercase;\n  letter-spacing: 6px;\n  text-align: center;\n  border-top: 10px double;\n  border-bottom: 10px double;\n`\n\nconst StyledInputSubmit = styled.input`\n  background-color: #673ab7;\n  border-radius: 0.15em;\n  box-shadow: inset 0 -20px 0 -20px rgba(0,0,0,0.17);\n  box-sizing: border-box;\n  color: #FFFFFF;\n  display: inline-block;\n  font-family: 'Alata', sans-serif;\n  letter-spacing: 2px;\n  font-size: 20px;\n  font-weight: 600;\n  padding: 16px;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  width: 180px;\n`;\n\nconst Reset = styled.button`\n  background-color: #673ab7;\n  border-radius: 0.15em;\n  box-shadow: inset 0 -20px 0 -20px rgba(0,0,0,0.17);\n  box-sizing: border-box;\n  color: #FFFFFF;\n  display: inline-block;\n  font-family: 'Alata', sans-serif;\n  letter-spacing: 2px;\n  font-size: 20px;\n  font-weight: 600;\n  padding: 16px;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  width: 180px;\n`;\n\nconst StyledInput = styled.input`\n  border: solid 2px darkturquoise;\n  height: 50px;\n  line-height: 50px;\n  width: 100px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-size: 22px;\n  font-weight: 600;\n  color: darkolivegreen;\n  text-align: center;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nconst Label = styled.div`\n  text-transform: uppercase;\n  font-weight: 900;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst StyledResult = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: flex-start;\n  margin-top: 8px;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst StyledResultLabel = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  font-size: 18px;\n  font-weight: 900;\n  text-transform: capitalize;\n  letter-spacing: 2px;\n  margin-right: 40px;\n  width: 80%;\n`;\n\nconst StyledResultValue = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  font-size: 18px;\n  font-weight: 600;\n  width: 20%;\n`;\n\nconst StyledError = styled.span`\n  margin-bottom: 10px;\n  font-weight: 900;\n  color: red;\n`;\n\n\nconst Calculate: React.FC = () => {\n  const [result, setResult]: any = useState({});\n\n  const [request, response] = useFetch('https://choco-bar.herokuapp.com');\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: {\n      numberOfBars: 1\n    }\n  })\n\n\n\n  const onSubmit = async (data: any) => {\n    const submitValue = await request.post('/', {\n      numberOfBars: Number(data.numberOfBars),\n      pricesOfBarPacketBox: [2.30, 25, 230], //TODO: Replace it with API call\n      quantitiesOfBarPacketBox: [1, 12, 120] //TODO: Replace it with API call\n    })\n\n    if (response.ok) {\n      setResult(submitValue)\n    }\n  }\n\n  const resultContainKeys = 'numberOfBars' in result\n    && 'numberOfPacks' in result\n    && 'numberOfBoxes' in result\n    && 'totalCost' in result;\n\n  return <OutterWrapper>\n    <CalculateWrapper>\n      <StyledHeader>SaveMoney Calculator</StyledHeader>\n      {result && resultContainKeys ?\n        <InnerWrapper>\n          <InnerWrapperResult >\n            {Object.keys(result).map((item) => {\n              return <StyledResult key={item}>\n                <StyledResultLabel>{item}:</StyledResultLabel>\n                <StyledResultValue>{result[item]}</StyledResultValue>\n              </StyledResult>\n            })}\n          </InnerWrapperResult>\n          <Reset onClick={() => setResult({})}>RESET</Reset>\n        </InnerWrapper> :\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <InnerWrapper>\n            <Label>Enter Quantity:</Label>\n            <StyledInput name=\"numberOfBars\" type=\"number\" ref={register({ required: true })} />\n            {errors.numberOfBars && <StyledError>This quantity number is required</StyledError>}\n            <StyledInputSubmit type=\"submit\" />\n          </InnerWrapper>\n        </form>\n      }\n\n\n    </CalculateWrapper>\n\n  </OutterWrapper >\n}\n\n\nexport default Calculate;\nexport { Calculate }","import React, { useRef, useEffect, useState } from 'react';\nimport useFetch from 'use-http'\nimport { BarLoader } from 'react-css-loaders';\nimport styled from 'styled-components';\n\ninterface IBar {\n  id: number;\n  name: string;\n  weight: number;\n  company: string;\n  price: number;\n  quantity: number;\n  img: string;\n  pricesofbarpacketbox: Array<number>;\n  quantitiesofbarpacketbox: Array<number>;\n}\n\nconst OutterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Wrapper = styled.div`\n  margin-left: 120px;\n  margin-right: 120px;\n  margin-top: 60px;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n  transition: 0.3s;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-items: center;\n\n\n  &:hover {\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n  }\n`\n\n\nconst StyledImage = styled.img`\n  width: 40%;\n`\n\nconst StyledContent = styled.div`\n  width: 80%;\n`\nconst StyledContentHeading = styled.div`\n font-size: 30px;\n font-weight: 700;\n text-align: center;\n`\n\nconst StyledContentDescription = styled.div`\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 40px;\n  margin-top: 20px;\n  width: 100%;\n`\n\nconst StyledContentDescriptionWrapper = styled.div`\n  display: flex;\n`\n\nconst StyledLabel = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  letter-spacing: 1px;\n`\n\nconst StyledContentPrice = styled.div`\n color: #B12704;\n font-size: 16px;\n font-weight: 600;\n &::before {\n   content: '€ '\n }\n\n margin-left: 8px;\n`\n\nconst StyledContentWeight = styled.div`\n color: blueviolet;\n font-size: 16px;\n font-weight: 600;\n margin-left: 8px;\n\n &::after {\n   content: 'g'\n }\n`\n\nconst StyledContentQuantity = styled.div`\n color: darkslategray;\n font-size: 16px;\n font-weight: 600;\n margin-left: 8px;\n\n`\n\n\n\nconst Content: React.FC = () => {\n  const [bars, setBars] = useState<Array<IBar>>([])\n  const [request, response] = useFetch('https://choco-bar.herokuapp.com');\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    initializeBars();\n  })\n\n\n  async function initializeBars() {\n    const initalBars = await request.get('/');\n    if (response.ok) setBars(initalBars)\n  }\n\n\n  return (\n    <>\n      {request.error && <Wrapper>{\"Failed loading choclate bar\"}</Wrapper>}\n      {request.loading && <BarLoader />}\n      <OutterWrapper>\n        {bars.map((bar) => <Wrapper key={bar.id}>\n          <StyledImage src={bar.img} alt=\"chocolate-bar\" />\n          <StyledContent>\n            <StyledContentHeading>{bar.name}</StyledContentHeading>\n            <StyledContentDescription>\n              <StyledContentDescriptionWrapper>\n                <StyledLabel>quantity:</StyledLabel>\n                <StyledContentQuantity>{bar.quantity}</StyledContentQuantity>\n              </StyledContentDescriptionWrapper>\n              <StyledContentDescriptionWrapper>\n                <StyledLabel>price:</StyledLabel>\n                <StyledContentPrice>{bar.price}</StyledContentPrice>\n              </StyledContentDescriptionWrapper>\n              <StyledContentDescriptionWrapper>\n                <StyledLabel>weight:</StyledLabel>\n                <StyledContentWeight>{bar.weight}</StyledContentWeight>\n              </StyledContentDescriptionWrapper>\n            </StyledContentDescription>\n          </StyledContent>\n        </Wrapper>)}\n      </OutterWrapper>\n\n    </>\n  )\n}\n\nexport default Content;\nexport { Content }","import React from 'react';\n\nimport NavBar from './NavBar';\nimport Error from './Error';\nimport { Content, Calculate } from '../containers';\n\n\n\n\nconst App: React.FC = () => {\n  return <>\n    <NavBar title=\"ChocoBar\" />\n    <Error>\n      <Content />\n    </Error>\n    <Error >\n      <Calculate />\n    </Error>\n  </>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}